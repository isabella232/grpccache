// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package testpb is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	TestOp
	T
	TestResult
*/
package testpb

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type TestOp struct {
	A int32 `protobuf:"varint,2,opt,name=a" json:"a,omitempty"`
	B []*T  `protobuf:"bytes,3,rep,name=b" json:"b,omitempty"`
}

func (m *TestOp) Reset()         { *m = TestOp{} }
func (m *TestOp) String() string { return proto.CompactTextString(m) }
func (*TestOp) ProtoMessage()    {}

func (m *TestOp) GetB() []*T {
	if m != nil {
		return m.B
	}
	return nil
}

type T struct {
	A bool `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
}

func (m *T) Reset()         { *m = T{} }
func (m *T) String() string { return proto.CompactTextString(m) }
func (*T) ProtoMessage()    {}

type TestResult struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}

// Client API for Test service

type TestClient interface {
	TestMethod(ctx context.Context, in *TestOp, opts ...grpc.CallOption) (*TestResult, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) TestMethod(ctx context.Context, in *TestOp, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := grpc.Invoke(ctx, "/testpb.Test/TestMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	TestMethod(context.Context, *TestOp) (*TestResult, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_TestMethod_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(TestOp)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServer).TestMethod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMethod",
			Handler:    _Test_TestMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
