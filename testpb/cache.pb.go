// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_trace.go -o cache.pb.go -pkg testpb -files sourcegraph.com/sqs/grpccache/testpb@test.pb.go
//
// Called via:
//
//   go generate
//

package testpb

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"sourcegraph.com/sqs/grpccache"
)

type CachedTestServer struct{ TestServer }

func (s *CachedTestServer) TestMethod(ctx context.Context, in *TestOp) (*TestResult, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.TestServer.TestMethod(ctx, in)
	if !cc.IsZero() {
		grpccache.Internal_SetCacheControlTrailer(ctx, *cc)
	}
	return result, err
}

type CachedTestClient struct {
	TestClient
	Cache *grpccache.Cache
}

func (s *CachedTestClient) TestMethod(ctx context.Context, in *TestOp, opts ...grpc.CallOption) (*TestResult, error) {
	if s.Cache != nil {
		var cachedResult TestResult
		cached, err := s.Cache.Get(ctx, "Test.TestMethod", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.TestClient.TestMethod(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Test.TestMethod", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}
